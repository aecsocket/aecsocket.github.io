"use strict";(self.webpackChunkaecsocket_github_io=self.webpackChunkaecsocket_github_io||[]).push([[266],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=n,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return r?a.createElement(h,o(o({ref:t},p),{},{components:r})):a.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8363:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:4},o="Rattle",s={unversionedId:"rattle/README",id:"rattle/README",title:"Rattle",description:"Generic physics engine framework for Minecraft servers",source:"@site/docs/rattle/README.md",sourceDirName:"rattle",slug:"/rattle/",permalink:"/rattle/",draft:!1,editUrl:"https://github.com/aecsocket/aecsocket.github.io/blob/main/docs/rattle/README.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Alexandria",permalink:"/alexandria/"},next:{title:"Platforms",permalink:"/rattle/platforms/"}},l={},c=[{value:"GitHub \xb7 Docs \xb7 Dokka",id:"github--docs--dokka",level:3},{value:"Getting started",id:"getting-started",level:2},{value:"Supported platforms and installation guides",id:"supported-platforms-and-installation-guides",level:3},{value:"For users",id:"for-users",level:3},{value:"For developers",id:"for-developers",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"rattle"},"Rattle"),(0,n.kt)("p",null,"Generic physics engine framework for Minecraft servers"),(0,n.kt)("h3",{id:"github--docs--dokka"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/aecsocket/rattle"},"GitHub")," \xb7 ",(0,n.kt)("a",{parentName:"h3",href:"https://aecsocket.github.io/rattle"},"Docs")," \xb7 ",(0,n.kt)("a",{parentName:"h3",href:"https://aecsocket.github.io/rattle/dokka"},"Dokka")),(0,n.kt)("p",null,"Rattle is an project which integrates a fully-featured physics engine into a server-side game environment,\nand exposes an ergonomic and user-friendly API for interacting with the physics state. The integration\nincludes having the world state (such as blocks and entities) influence the physics state (i.e. blocks in\nthe terrain can be collided against), and allow that physics state to be displayed to vanilla clients via\ntechniques such as display entities - no mods required!"),(0,n.kt)("p",null,"This project currently uses the ",(0,n.kt)("a",{parentName:"p",href:"https://rapier.rs"},"Rapier")," physics engine backend, with Java bindings\nprovided via ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/aecsocket/rapier-ffi/tree/main/rapier-java"},"rapier-ffi/rapier-java"),", and\nintegrated as a Rattle backend in the ",(0,n.kt)("inlineCode",{parentName:"p"},"rattle-rapier")," module."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"This project requires Java 19 ",(0,n.kt)("em",{parentName:"strong"},"exactly"),", and the ",(0,n.kt)("inlineCode",{parentName:"strong"},"--enable-preview --enable-native-access=ALL-UNNAMED")," flags\nmust be set!")," See the installation guides for more detail."),(0,n.kt)("h2",{id:"getting-started"},"Getting started"),(0,n.kt)("p",null,"Note: The terms mod and plugin are used interchangeably in these documents."),(0,n.kt)("h3",{id:"supported-platforms-and-installation-guides"},(0,n.kt)("a",{parentName:"h3",href:"./platforms/"},"Supported platforms and installation guides")),(0,n.kt)("h3",{id:"for-users"},(0,n.kt)("a",{parentName:"h3",href:"./guide/user/"},"For users")),(0,n.kt)("h3",{id:"for-developers"},(0,n.kt)("a",{parentName:"h3",href:"./guide/dev/"},"For developers")))}u.isMDXComponent=!0}}]);