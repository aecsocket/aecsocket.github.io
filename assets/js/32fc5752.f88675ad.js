"use strict";(self.webpackChunkaecsocket_github_io=self.webpackChunkaecsocket_github_io||[]).push([[408],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,k=m["".concat(d,".").concat(u)]||m[u]||c[u]||l;return a?n.createElement(k,r(r({ref:t},s),{},{components:a})):n.createElement(k,r({ref:t},s))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7591:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const l={sidebar_position:3},r="Commands",o={unversionedId:"rattle/guide/user/commands",id:"rattle/guide/user/commands",title:"Commands",description:"Admin commands for modifying the physics state.",source:"@site/docs/rattle/guide/user/commands.md",sourceDirName:"rattle/guide/user",slug:"/rattle/guide/user/commands",permalink:"/rattle/guide/user/commands",draft:!1,editUrl:"https://github.com/aecsocket/aecsocket.github.io/blob/main/docs/rattle/guide/user/commands.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Installation",permalink:"/rattle/guide/user/installation"},next:{title:"Developer guide",permalink:"/rattle/guide/dev/"}},d={},p=[{value:"<code>/rattle space</code>",id:"rattle-space",level:2},{value:"<code>/rattle body</code>",id:"rattle-body",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"<code>destroy</code>",id:"destroy",level:3},{value:"<code>/rattle stats</code>",id:"rattle-stats",level:2},{value:"<code>/rattle launcher</code>",id:"rattle-launcher",level:2}],s={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"commands"},"Commands"),(0,i.kt)("p",null,"Admin commands for modifying the physics state."),(0,i.kt)("p",null,"Rattle exports a single command, ",(0,i.kt)("inlineCode",{parentName:"p"},"/rattle"),", which manages all the state of the mod.\nIt has several subcommands for specific functions, and all permission nodes for commands\nfollow the same format, starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"rattle.command."),", and usually followed by the full\npath to that command. This prefix will be omitted and replaced with a single leading dot (",(0,i.kt)("inlineCode",{parentName:"p"},"."),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: at some point, this documentation may be merged into the in-game command documentation\ninstead. This would make it easier to maintain and keep up-to-date.")),(0,i.kt)("h2",{id:"rattle-space"},(0,i.kt)("inlineCode",{parentName:"h2"},"/rattle space")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"<world>")," - the world to manipulate"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"create")," - creates a world physics object for a world, if it does not already exist"),(0,i.kt)("p",{parentName:"li"},"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".space.create"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," - destroys a world physics object, and all associated data"),(0,i.kt)("p",{parentName:"li"},"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".space.destroy")))))),(0,i.kt)("h2",{id:"rattle-body"},(0,i.kt)("inlineCode",{parentName:"h2"},"/rattle body")),(0,i.kt)("p",null,'Manages the state of "simple bodies" in the world - that is, lightweight debug bodies which\nare automatically rendered to players.'),(0,i.kt)("h3",{id:"create"},(0,i.kt)("inlineCode",{parentName:"h3"},"create")),(0,i.kt)("p",null,"Creates one or more of these simple bodies."),(0,i.kt)("p",null,"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".body.create")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<location>")," - the center around which to spawn bodies"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--count"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-n")," - the number of bodies to create, default ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--spread"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-s")," - the half-extent in which bodies will be randomly positioned around ",(0,i.kt)("inlineCode",{parentName:"li"},"location"),",\ndefault ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0")," (the algorithm spawns bodies within a cube, half-side length ",(0,i.kt)("inlineCode",{parentName:"li"},"spread"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--density"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-d")," - the physical density of a body, default ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0"),"\n(automatically computes mass)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--mass"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-m")," - the physical mass of a body, default computed by density\n(automatically computes density)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--friction")," - the friction coefficient of the collider, default ",(0,i.kt)("inlineCode",{parentName:"li"},"0.5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--restitution")," - the restitution coefficient of the collider, default ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--virtual"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-v")," - if specified, no displayed render will be created - the body will be\nsimulated but not drawn",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fixed")," - the bodies created will be fixed (not moving)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sphere"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"radius")," - radius of the sphere"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"box"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"half-extent")," - half-lengths of the sides of the box"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dynamic")," - the bodies created will be dynamic (moving)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--ccd")," - if specified, this body will have CCD enabled"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--gravity-scale"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"-g")," - a multiplier for the gravity acceleration applied, default ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0")),(0,i.kt)("li",{parentName:"ul"},"(...)")))))),(0,i.kt)("h3",{id:"destroy"},(0,i.kt)("inlineCode",{parentName:"h3"},"destroy")),(0,i.kt)("p",null,"Destroys simple bodies."),(0,i.kt)("p",null,"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".body.destroy")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<world>")," - the world in which to destroy bodies",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"all")," - destroy all bodies")))),(0,i.kt)("h2",{id:"rattle-stats"},(0,i.kt)("inlineCode",{parentName:"h2"},"/rattle stats")),(0,i.kt)("p",null,"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".stats")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"displays statistics gathered in the last few seconds on how the engine is performing"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<enabled>"),' - optional; if you are a player, enables or disables a "stats boss-bar" display\nwhich shows a shorter form of the stats in real-time')),(0,i.kt)("h2",{id:"rattle-launcher"},(0,i.kt)("inlineCode",{parentName:"h2"},"/rattle launcher")),(0,i.kt)("p",null,"Permission: ",(0,i.kt)("inlineCode",{parentName:"p"},".launcher")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"if no arguments are specified, disables the launcher; otherwise, if you are a player...")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sphere")," - you can launch spherical rigid bodies by left-clicking"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"radius")," - radius of the sphere"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"box")," - you can launch box-shaped rigid bodies by left-clicking"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"half-extent")," - half-lengths of the sides of the box"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--friction")," - the friction coefficient of the body (min 0)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--restitution")," - the restitution coefficient of the body (min 0)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--velocity"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-v")," - the initial magnitude of linear velocity (speed) of the body as it is launched")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--density"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-d")," - density of the collider for that body")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"--no-ccd")," - disables continuous collision detection"),(0,i.kt)("p",{parentName:"li"},"Note: this is automatically enabled because you will typically be launching bodies at high speeds\nwith this tool, because it's fun. So to disable CCD, you must explicitly mark it as such."))))}c.isMDXComponent=!0}}]);